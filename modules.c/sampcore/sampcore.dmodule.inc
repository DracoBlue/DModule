/*  SA:MP Functions
 *
 *  (c) Copyright 2005-2006, SA:MP Team
 *
 */

#pragma library samp
main () {

}

#pragma dynamic 16000000

#define SAMP_MAX_TEAMS 255
// Util
#if !defined print
native print(const string[]);
#endif
#if defined DEBUG_EVENTS
stock debugprint(msg[]) print(msg);
#endif
#if !defined printf
native printf(const format[], {Float,_}:...);
#endif
native SendClientMessageToAll(color, const message[]);
native GameTextForAll(const string[],time,style);
native SetTimer(funcname[], interval, repeating);
native SetTimerEx(funcname[], interval, repeating, const format[], {Float,_}:...);
native KillTimer(timerid);
native GetTickCount();
native GetMaxPlayers();
native LimitGlobalChatRadius(Float:chat_radius);
native CallRemoteFunction(const function[], const format[], {Float,_}:...);
native CallLocalFunction(const function[], const format[], {Float,_}:...);
native Float:asin(Float:value);
native Float:acos(Float:value);
native Float:atan(Float:value);
native Float:atan2(Float:x, Float:y);

// Game
native SetGameModeText(const string[]);
native SetTeamCount(count);
new SAMPCORE_team_for_class[SAMP_MAX_TEAMS];
new SAMPCORE_team_for_class_count=0;
native SAMP_AddPlayerClass(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)=AddPlayerClass;
stock AddPlayerClass(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo) {
	SAMPCORE_team_for_class[SAMPCORE_team_for_class_count]=0;
	SAMPCORE_team_for_class_count++;
	return SAMP_AddPlayerClass(modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
}

native SAMP_AddPlayerClassEx(teamid, modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)=AddPlayerClassEx;
stock AddPlayerClassEx(teamid, modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo) {
	SAMPCORE_team_for_class[SAMPCORE_team_for_class_count]=teamid;
	SAMPCORE_team_for_class_count++;
	return SAMP_AddPlayerClassEx(teamid,modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
}

native ShowNameTags(show);
native ShowPlayerMarkers(show);
native GameModeExit();
native SetWorldTime(hour);
native GetWeaponName(weaponid, const weapon[], len);
native EnableTirePopping(enable);
native AllowInteriorWeapons(allow);
native SetWeather(weatherid);
native SetGravity(Float:gravity);
native AllowAdminTeleport(allow);
native SetDeathDropAmount(amount);
native CreateExplosion(Float:X, Float:Y, Float:Z, type, Float:Radius);
native EnableZoneNames(enable);
native UsePlayerPedAnims();		// Will cause the players to use CJ running/walking animations
native DisableInteriorEnterExits();  // will disable all interior enter/exits in the game.
native SetNameTagDrawDistance(Float:distance); // Distance at which nametags will start rendering on the client.

// Admin
native SendRconCommand(command[]);
native GetServerVarAsString(const varname[], buffer[], len);
native GetServerVarAsInt(const varname[]);
native GetServerVarAsBool(const varname[]);

// Insane Stunts
native EnableStuntBonusForAll(enable);

// --------------------------------------------------
// Events
// --------------------------------------------------

forward OnGameModeInit(); public OnGameModeInit() {
	DmoduleInitLang();
	_GameModeInit();
	return 1;
}
forward OnGameModeExit(); public OnGameModeExit() {
	_GameModeExit();
	return 1;
}
forward OnRconCommand(cmd[]); public OnRconCommand(cmd[]) {
	if (_RconCommand(cmd)) {
		return 0;
	}
	return 1;
}

forward OnFilterScriptInit(); public OnFilterScriptInit() {
	DmoduleInitLang();
	_FilterScriptInit();
	return 1;
}
forward OnFilterScriptExit(); public OnFilterScriptExit() {
	_FilterScriptExit();
	return 1;
}

forward OnRconLoginAttempt(ip[], password[], success); public OnRconLoginAttempt(ip[], password[], success) {
    if (_RconLoginAttempt(ip, password, success)) {
        return 0;
    }
    return 1;
}


// --------------------------------------------------
// Defines
// --------------------------------------------------

// States
#define PLAYER_STATE_NONE						(0)
#define PLAYER_STATE_ONFOOT						(1)
#define PLAYER_STATE_DRIVER						(2)
#define PLAYER_STATE_PASSENGER					(3)
#define PLAYER_STATE_EXIT_VEHICLE				(4) // (used internally)
#define PLAYER_STATE_ENTER_VEHICLE_DRIVER		(5) // (used internally)
#define PLAYER_STATE_ENTER_VEHICLE_PASSENGER	(6) // (used internally)
#define PLAYER_STATE_WASTED						(7)
#define PLAYER_STATE_SPAWNED					(8)
#define PLAYER_STATE_SPECTATING					(9)

// Misc
#define MAX_PLAYER_NAME							(24)
#define INVALID_PLAYER_ID						(0xFFFF)
#define NO_TEAM									(255)

// Weapons
#define WEAPON_BRASSKNUCKLE             (1)
#define WEAPON_GOLFCLUB                 (2)
#define WEAPON_NITESTICK                (3)
#define WEAPON_KNIFE                    (4)
#define WEAPON_BAT                      (5)
#define WEAPON_SHOVEL                   (6)
#define WEAPON_POOLSTICK                (7)
#define WEAPON_KATANA                   (8)
#define WEAPON_CHAINSAW                 (9)
#define WEAPON_DILDO                    (10)
#define WEAPON_DILDO2                   (11)
#define WEAPON_VIBRATOR                 (12)
#define WEAPON_VIBRATOR2                (13)
#define WEAPON_FLOWER                   (14)
#define WEAPON_CANE                     (15)
#define WEAPON_GRENADE                  (16)
#define WEAPON_TEARGAS                  (17)
#define WEAPON_MOLTOV                   (18)
#define WEAPON_COLT45                   (22)
#define WEAPON_SILENCED                 (23)
#define WEAPON_DEAGLE                   (24)
#define WEAPON_SHOTGUN                  (25)
#define WEAPON_SAWEDOFF                 (26)
#define WEAPON_SHOTGSPA                 (27)
#define WEAPON_UZI                      (28)
#define WEAPON_MP5                      (29)
#define WEAPON_AK47                     (30)
#define WEAPON_M4                       (31)
#define WEAPON_TEC9                     (32)
#define WEAPON_RIFLE                    (33)
#define WEAPON_SNIPER                   (34)
#define WEAPON_ROCKETLAUNCHER           (35)
#define WEAPON_HEATSEEKER               (36)
#define WEAPON_FLAMETHROWER             (37)
#define WEAPON_MINIGUN                  (38)
#define WEAPON_SATCHEL                  (39)
#define WEAPON_BOMB                     (40)
#define WEAPON_SPRAYCAN                 (41)
#define WEAPON_FIREEXTINGUISHER         (42)
#define WEAPON_CAMERA                   (43)
#define WEAPON_PARACHUTE                (46)
#define WEAPON_VEHICLE                  (49)
#define WEAPON_DROWN                    (53)
#define WEAPON_COLLISION                (54)

// Keys
#define KEY_ACTION              (1)
#define KEY_CROUCH              (2)
#define KEY_FIRE                (4)
#define KEY_SPRINT              (8)
#define KEY_SECONDARY_ATTACK    (16)
#define KEY_JUMP                (32)
#define KEY_LOOK_RIGHT          (64)
#define KEY_HANDBRAKE           (128)
#define KEY_LOOK_LEFT           (256)
#define KEY_SUBMISSION          (512)
#define KEY_LOOK_BEHIND         (512)
#define KEY_WALK                (1024)
#define KEY_ANALOG_UP           (2048)
#define KEY_ANALOG_DOWN         (4096)
#define KEY_ANALOG_LEFT         (8192)
#define KEY_ANALOG_RIGHT        (16384)

#define KEY_UP                  (-128)
#define KEY_DOWN                (128)
#define KEY_LEFT                (-128)
#define KEY_RIGHT               (128)

// Spectating
#define SPECTATE_MODE_NORMAL	1
#define SPECTATE_MODE_FIXED		2
#define SPECTATE_MODE_SIDE		3
